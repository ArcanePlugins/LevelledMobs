##########################################
#           ~ LevelledMobs v4 ~          #
# The Ultimate RPG Mob Levelling Plugin  #
##########################################

# TODO: Welcome to the settings.yml To-Do List
# TODO: 
# TODO: - Clarify prefix and suffix placeholders for LM labels.
# TODO: - Make the label formulas look all nice and formatted.

# These comments are also only here for brainstorming purposes
# 99% of them will be removed once the file is considered finished
# ^^ most of them are only to explain what is going on in LM 4.

# LM 4 is based upon a Functions System, instead of LM 3's Rules System. They are quite similar.
#
# Functions are used to configure the plugin up to an extreme degree. So much is
# possible!
#
# Users can create as many functions as they want, they act like methods/functions in
# programming languages.
#
# Functions have Processes in them, which contain the actual logic of the function.
# Processes have a list of Conditions and Actions. All (or a specific % of) conditions
# must be satisfied in a given Process in order for it to execute all of the Actions.
# Actions can be things like 'Level this mob' or 'Send a chat message'. Conditions can be
# things like 'Is this mob already levelled' or 'What world is this mob in'. There are also
# actions which can modify the processing in a function, e.g. 'exit-function' is an action
# which stops a given function from doing any more processing.
# 
# Functions are processed from top to bottom, same with processes, actions, and conditions.
#
# Functions can also call other functions by using an action. LevelledMobs will detect if a
# function seems to have a circular dependency (e.g. function1 runs function2 which then
# runs function1 again), it will simply run the 'exit-function' action automatically and
# yell at the console. An advanced setting can disable the circular dependency detection.
functions:
  - function: 'mob-leveller'
    description: 'This function automatically levels mobs, if they fit certain requirements.'
    
    # A list of events which will trigger this function automatically.
    # 'on-mob-spawn' = EntitySpawnEvent
    # 'on-mob-scan' = when LM automatically scans an entity async, some random LivingEntity.
    triggers: ['on-mob-spawn', 'on-mob-scan']

    # Processes can be clumped together into Clusters. This allows a group of processes to be
    # easily enabled/disabled. There is also an action to exit the current cluster. Clusters
    # can be nested, though users should avoid this because it might look messy.
    processes:
      - process: 'check-not-levellable'
        description: 'Establishes conditions required for individual mobs to become levelled.'
        use-presets: ['average-challenge']
        if:
          
          # This condition makes sure that levels are only assigned to mobs
          # that don't already have a level.
          - check: 'levelled-state'
            required-state: 'NOT_LEVELLED'

          # This condition allows you to specify what world names should NOT
          # have newly spawned mobs to be levelled by LevelledMobs.
          - check: 'world'
            case-sensitivity: true
            in-list: ['example_world_123']

          # This condition allows you to specify what entity types should NOT
          # be levelled by LevelledMobs.
          - check: 'entity-type'
            description: >
              A list of mob entity types which are not allowed to become levelled.
              Note: you may want to consider nerfing the attribute multipliers on
              the mob instead of making it not levelled.
            in-list: []

          # This condition allows you to specify a list of plugin names which
          # should skip LevelledMobs' compatibility checks. For example,
          # you can specify 'DangerousCaves' in the list to make DangerousCaves'
          # mobs levelled by LevelledMobs. By default, we aim to only level mobs
          # that are *not* managed by other plugins.
          # You may have noticed that '*not* in list' is used instead of 'in list',
          # this is done as we want to block all MobOwner plugins by default.
          - check: 'mob-owner'
            description: 'A list of MobOwner plugin integration names which are allowed to become levelled.'
            not-in-list: []

        # A list of actions that this process will run, if the conditions are met.
        do:

          # This action tells LevelledMobs that the mob should not
          # receive any level, i.e., LevelledMobs should ignore it.
          - action: 'set-level'
            formula: 'no-level'

          # This action tells LevelledMobs to not process the rest of
          # the function any further. If this is otherwise omitted,
          # then LevelledMobs will run the 'apply-level' process below,
          # effectively making the 'check-not-levellable' process
          # useless.
          - action: 'exit-function'

      - process: 'apply-level'
        do:
          - action: 'set-level'
            formula: '%weighted-random-level%'
            strategies:
              weighted-random:
                tiers:
                  '1-20': 8
                  '21-40': 6
                  '41-60': 4
                  '61-80': 2
                  '81-100': 1
            # The difficulty preset will put set-level at this certain position,
            # instead of putting it at the bottom of this actions list.
          - placeholder: 'set-buffs'
          - action: 'set-packet-nametag'
            # TODO add color
            formula: '[Lvl %mob-lvl% | %prefix%%mob-name%%suffix% | %mob-health%/%mob-max-health%hp | %mob-health-indicator-left%]'
            visibility-methods: ['TARGETED', 'ATTACKED']
            visibility-duration: 5
          - action: 'set-death-nametag'
            # TODO add color
            formula: '[Lvl %mob-lvl% | %prefix%%Mobname%%suffix%]'
          - action: 'set-level-inheritance'
            babies-inherit-level: true
            passengers-inherit-level: true

  - function: 'nametag-updater'
    description: 'This function updates the nametags of levelled mobs automatically.'
    triggers:
      - 'on-mob-damage'
      - 'on-mob-regain-health'
      - 'on-player-join'
      - 'on-player-teleport'
      - 'on-mob-track'
      - 'on-mob-scan'
    processes:
      - process: 'update-nametag-for-mob'
        if:
          # Make sure this process only affects levelled mobs.
          - check: 'levelled-state'
            required-state: 'LEVELLED'
        do:
          # Update the nametag of the mob.
          - action: 'update-nametag'

# What translation would you like to use?
# By default this will choose 'en_US.yml' in the directory 'plugins/LevelledMobs/translations/'.
#
# Inbuilt translations you can use:
# - de_DE   (German / Deutsche)
# - en_AU   (English - Australia)
# - en_GB   (English - United Kingdom)
# - en_US   (English - United States of America)
# - es_ES   (Spanish / Español)
# - fr_FR   (French / Français)
lang: 'en_US'

# Should LevelledMobs asynchronously scan for pre-existing mobs to level?
#
##### Move to wiki:
##### If LevelledMobs was installed since you last reset your world, you can
##### disable this. This is enabled by default as most server owners likely
##### install LevelledMobs on servers with existing worlds.
scan-for-existing-mobs: true

# The following settings are in regards to configuring
# the '%levelledmobs_mob-target%' placeholder from PlaceholderAPI.
mob-target-placeholder:

  # Format to use if the mob target is a levelled mob.
  levelled: 'default'

  # Format to use if the mob target is *not* a levelled mob.
  not-levelled: '%entity-name%'

##### NOTE TO REVIEWERS: Check out the `demo/advanced_settings.yml` file
##### to see all of the hidden Advanced Settings that can be present in
##### this file upon manual inclusion from the user.

#### File Metadata
# Do not edit this section!
metadata:
  version:
    original: 34
    current: 34
